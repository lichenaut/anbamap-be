use std::{collections::HashMap, vec};
use lazy_static::lazy_static;

#[derive(Debug, Eq, PartialEq, Hash)]
pub enum RegionType { // https://en.wikipedia.org/wiki/List_of_alternative_country_names
    Global,
    Abkhazia,
    Afghanistan,
    Albania,
    Algeria,
    Andorra,
    Angola,
    AntiguaAndBarbuda,
    Argentina,
    Armenia,
    Australia,
    Austria,
    Azerbaijan,
    TheBahamas,
    Bahrain,
    Bangladesh,
    Barbados,
    Belarus,
    Belgium,
    Belize,
    Benin,
    Bhutan,
    Bolivia,
    BosniaAndHerzegovina,
    Botswana,
    Brazil,
    Brunei,
    Bulgaria,
    BurkinaFaso,
    Burundi,
    Cambodia,
    Cameroon,
    Canada,
    CapeVerde,
    CentralAfricanRepublic,
    Chad,
    Chile,
    China,
    Taiwan,
    Colombia,
    Comoros,
    Congo,
    DemocraticRepublicOfCongo,
    CostaRica,
    IvoryCoast,
    Croatia,
    Cuba,
    Cyprus,
    CzechRepublic,
    Denmark,
    Djibouti,
    Dominica,
    DominicanRepublic,
    EastTimor,
    Ecuador,
    Egypt,
    ElSalvador,
    EquatorialGuinea,
    Eritrea,
    Estonia,
    Eswatini,
    Ethiopia,
    Fiji,
    Finland,
    France,
    Gabon,
    TheGambia,
    Georgia,
    Germany,
    Ghana,
    Greece,
    Grenada,
    Guatemala,
    Guinea,
    GuineaBissau,
    Guyana,
    Haiti,
    Honduras,
    Hungary,
    Iceland,
    India,
    Indonesia,
    Iran,
    Iraq,
    Ireland,
    Israel,
    Italy,
    Jamaica,
    Japan,
    Jordan,
    Kazakhstan,
    Kenya,
    Kiribati,
    NorthKorea,
    SouthKorea,
    Kosovo,
    Kuwait,
    Kyrgyzstan,
    Laos,
    Latvia,
    Lebanon,
    Lesotho,
    Liberia,
    Libya,
    Liechtenstein,
    Lithuania,
    Luxembourg,
    Madagascar,
    Malawi,
    Malaysia,
    Maldives,
    Mali,
    Malta,
    MarshallIslands,
    Mauritania,
    Mauritius,
    Mexico,
    Micronesia,
    Moldova,
    Monaco,
    Mongolia,
    Montenegro,
    Morocco,
    Mozambique,
    Myanmar,
    Namibia,
    Nauru,
    Nepal,
    Netherlands,
    NewZealand,
    Nicaragua,
    Niger,
    Nigeria,
    NorthMacedonia,
    Norway,
    Oman,
    Pakistan,
    Palau,
    Palestine,
    Panama,
    PapuaNewGuinea,
    Paraguay,
    Peru,
    Philippines,
    Poland,
    Portugal,
    PuertoRico,
    Qatar,
    Romania,
    Russia,
    Rwanda,
    SaintLucia,
    SaintKitssAndNevis,
    SaintVincentAndTheGrenadines,
    SaoTomeAndPrincipe,
    Samoa,
    SanMarino,
    SaudiArabia,
    Senegal,
    Serbia,
    Seychelles,
    SierraLeone,
    Singapore,
    Slovakia,
    Slovenia,
    SolomonIslands,
    Somalia,
    SouthAfrica,
    SouthSudan,
    Spain,
    SriLanka,
    Sudan,
    Suriname,
    Sweden,
    Switzerland,
    Syria,
    Tajikistan,
    Tanzania,
    Togo,
    Tonga,
    Thailand,
    Transnistria,
    TrinidadAndTobago,
    Tunisia,
    Turkey,
    Turkmenistan,
    Tuvalu,
    Uganda,
    Ukraine,
    UnitedArabEmirates,
    UnitedKingdom,
    UnitedStates,
    Uruguay,
    Uzbekistan,
    Vanuatu,
    VaticanCity,
    Venezuela,
    Vietnam,
    WesternSahara,
    Yemen,
    Zambia,
    Zimbabwe,
}

struct RegionKeywords {
    pub names: Option<Vec<String>>,
    pub demonyms: Option<Vec<String>>,
    pub capitals: Option<Vec<String>>,
    pub relevant_figures: Option<Vec<String>>,
    pub relevant_cities: Option<Vec<String>>,
    pub subregions: Option<Vec<String>>,
    pub misc: Option<Vec<String>>,
}

impl RegionKeywords {
    pub fn get_region_vec(self) -> Vec<String> {
        let mut region_vec = Vec::new();
        if let Some(names) = self.names { region_vec.extend(names); }
        if let Some(demonyms) = self.demonyms { region_vec.extend(demonyms); }
        if let Some(capitals) = self.capitals { region_vec.extend(capitals); }
        if let Some(relevant_figures) = self.relevant_figures { region_vec.extend(relevant_figures); }
        if let Some(relevant_cities) = self.relevant_cities { region_vec.extend(relevant_cities); }
        if let Some(subregions) = self.subregions { region_vec.extend(subregions); }
        if let Some(misc) = self.misc { region_vec.extend(misc); }
        region_vec
    }
}

lazy_static! {//TODO: word count check for duplicates
    pub static ref REGION_MAP: HashMap<Vec<String>, RegionType> = {
        let mut map = HashMap::new();
        map.insert(RegionKeywords {
            names: None,
            demonyms: Some(vec!["abkhaz".into()]),
            capitals: Some(vec!["sukhumi".into()]),
            relevant_figures: Some(vec!["aslan bzhania".into(), "alexander ankvab".into(), "ruslan abashidze".into(), "jemal gamakharia".into()]),
            relevant_cities: None,
            subregions: Some(vec!["gagra".into(), "gudauta".into(), "ochamchira".into(), "gulripshi".into(), "tkvarcheli".into(), "gali".into()]),
            misc: None,
        }.get_region_vec(), RegionType::Abkhazia);
        map.insert(RegionKeywords {
            names: None,
            demonyms: Some(vec!["afghan".into()]),
            capitals: Some(vec!["kabul".into()]),
            relevant_figures: Some(vec!["hibatullah akhundzada".into(), "haibatullah akhunzada".into(), "hasan akhund".into(), "abdul hakim haqqani".into(), "abdul hakim ishaqzai".into()]),
            relevant_cities: Some(vec!["herat".into(), "mazar-i-sharif".into(), "mazar-e-sharif".into(), "kandahar".into(), "jalalabad".into()]),
            subregions: Some(vec!["badakhshan".into(), "badghis".into(), "baghlan".into(), "balkh".into(), "bamyan".into(), "daykundi".into(), "farah".into(), "faryab".into(), "ghazni".into(), "ghor".into(), "helmand".into(), "herat".into(), "jowzjan".into(), "kabul".into(), "kandahar".into(), "kapisa".into(), "khost".into(), "kunar".into(), "kunduz".into(), "laghman".into(), "logar".into(), "nangarhar".into(), "nimroz".into(), "nuristan".into(), "paktia".into(), "paktika".into(), "panjshir".into(), "parwan".into(), "samangan".into(), "sar-e pol".into(), "takhar".into(), "uruzgan".into(), "wardak".into(), "zabul".into()]),
            misc: Some(vec!["loya jirga".into(), "taliban".into()]),
        }.get_region_vec(), RegionType::Afghanistan);
        map.insert(RegionKeywords {
            names: Some(vec!["albania".into()]),
            demonyms: None,
            capitals: Some(vec!["tirana".into()]),
            relevant_figures: Some(vec!["bajram begaj".into(), "edi rama".into(), "lindita nikolla".into()]),
            relevant_cities: Some(vec!["durres".into()]),
            subregions: Some(vec!["berat".into(), "diber".into(), "durres".into(), "elbasan".into(), "fier".into(), "gjirokaster".into(), "korce".into(), "kukes".into(), "lezhe".into(), "shkoder".into(), "tirana".into(), "vlore".into()]),
            misc: Some(vec!["kuvendi".into()]),
        }.get_region_vec(), RegionType::Albania);
        map.insert(RegionKeywords {
            names: Some(vec!["algeria".into()]),
            demonyms: None,
            capitals: Some(vec!["algiers".into()]),
            relevant_figures: Some(vec!["abdelmadjid tebboune".into(), "nadir larbaoui".into(), "salah goudjil".into(), "ibrahim boughali".into()]),
            relevant_cities: Some(vec!["oran".into(), "constantine".into(), "annaba".into(), "blida".into(), "batna".into(), "djelfa".into(), "setif".into()]),
            subregions: Some(vec!["chlef".into(), "batna".into(), "blida".into(), "tizi ouzou".into(), "djelfa".into(), "setif".into(), "oran".into()]),
            misc: Some(vec!["le pouvoir".into(), "sonatrach".into(), "nlf".into()]),
        }.get_region_vec(), RegionType::Algeria);
        map.insert(RegionKeywords {
            names: Some(vec!["andorra".into()]),
            demonyms: None,
            capitals: None,
            relevant_figures: Some(vec!["joan enric vives i sicilia".into(), "macron".into(), "josep maria mauri".into(), "patrick strzoda".into(), "xavier espot zamora".into(), "carles ensenyat reig".into()]),
            relevant_cities: None,
            subregions: Some(vec!["canillo".into(), "escaldes-engordany".into(), "la massana".into(), "ordino".into(), "sant julia de loria".into()]),
            misc: Some(vec!["general syndic".into(), "council of the valleys".into()]),
        }.get_region_vec(), RegionType::Andorra);
        map.insert(RegionKeywords {
            names: Some(vec!["angola".into()]),
            demonyms: None,
            capitals: Some(vec!["luanda".into()]),
            relevant_figures: Some(vec!["joao lourenco".into(), "esperanca da costa".into()]),
            relevant_cities: Some(vec!["loanda".into(), "cabinda".into(), "kabinda".into(), "huambo".into(), "nova lisboa".into(), "bailundo".into(), "andulo".into(), "lubango".into(), "sa da bandeira".into()]),
            subregions: Some(vec!["bengo".into(), "benguela".into(), "bie".into(), "cabinda".into(), "cuando cubango".into(), "cuanza norte".into(), "cuanza sul".into(), "cunene".into(), "huambo".into(), "huila".into(), "luanda".into(), "lunda norte".into(), "lunda sul".into(), "malanje".into(), "moxico".into(), "namibe".into(), "uije".into(), "zaire".into()]),
            misc: Some(vec!["sonangol".into(), "mpla".into(), "unita".into()]),
        }.get_region_vec(), RegionType::Angola);
        map.insert(RegionKeywords {
            names: Some(vec!["antigua".into(), "barbuda".into(), "a&b".into()]),
            demonyms: None,
            capitals: None,
            relevant_figures: Some(vec!["king charles".into(), "charles iii".into(), "rodney williams".into(), "gaston browne".into()]),
            relevant_cities: None,
            subregions: Some(vec!["redonda".into()]),
            misc: Some(vec!["ablp".into()]),
        }.get_region_vec(), RegionType::AntiguaAndBarbuda);
        map.insert(RegionKeywords {
            names: None,
            demonyms: Some(vec!["argentin".into()]),
            capitals: Some(vec!["buenos aires".into()]),
            relevant_figures: Some(vec!["milei".into(), "victoria villarruel".into(), "nicolas posse".into(), "martin menem".into(), "horacio rosatti".into()]),
            relevant_cities: Some(vec!["cordoba".into(), "rosario".into(), "mendoza".into(), "la plata".into(), "san miguel de tucuman".into(), "mar del plata".into(), "salta".into(), "resistencia".into(), "neuquen".into(), "santiago del estero".into(), "corrientes".into(), "avellaneda".into(), "bahia blanca".into(), "quilmes".into(), "lanus".into()]),
            subregions: Some(vec!["catamarca".into(), "chaco".into(), "chubut".into(), "cordoba".into(), "corrientes".into(), "entre rios".into(), "formosa".into(), "jujuy".into(), "la pampa".into(), "la rioja".into(), "mendoza".into(), "misiones".into(), "neuquen".into(), "rio negro".into(), "salta".into(), "santiago del estero".into(), "tierra del fuego".into(), "antartida".into(), "tucuman".into()]),
            misc: Some(vec!["casa rosada".into(), "peronis".into(), "kirchneris".into(), "cambiemos".into()]),
        }.get_region_vec(), RegionType::Argentina);
        map.insert(RegionKeywords {
            names: Some(vec!["armenia".into()]),
            demonyms: None,
            capitals: Some(vec!["yerevan".into()]),
            relevant_figures: Some(vec!["vahagn khachaturyan".into(), "nikol pashinyan".into(), "alen simonyan".into()]),
            relevant_cities: Some(vec!["gyumri".into(), "vanadzor".into()]),
            subregions: Some(vec!["aragatsotn".into(), "ararat".into(), "armavir".into(), "gegharkunik".into(), "kotayk".into(), "shirak".into(), "syunik".into(), "tavush".into(), "vayots dzor".into()]),
            misc: Some(vec!["azgayin zhoghov".into()]),
        }.get_region_vec(), RegionType::Armenia);
        map.insert(RegionKeywords {
            names: Some(vec!["australia".into()]),
            demonyms: Some(vec!["aussie".into()]),
            capitals: Some(vec!["canberra".into()]),
            relevant_figures: Some(vec!["king charles".into(), "charles iii".into(), "david hurley".into(), "anthony albanese".into()]),
            relevant_cities: Some(vec!["sydney".into(), "melbourne".into(), "brisbane".into(), "perth".into(), "adelaide".into(), "hobart".into(), "darwin".into()]),
            subregions: Some(vec!["new south wales".into(), "queensland".into(), "tasmania".into(), "jervis bay".into(), "norfolk island".into(), "christmas island".into(), "coral sea island".into(), "ashmore and cartier".into(), "heard island".into(), "mcdonald island".into()]),
            misc: Some(vec!["aborigin".into(), "torres strait".into()]),
        }.get_region_vec(), RegionType::Australia);
        map.insert(RegionKeywords {
            names: Some(vec!["austria".into(), "oesterreich".into()]),
            demonyms: None,
            capitals: Some(vec!["vienna".into()]),
            relevant_figures: Some(vec!["van der bellen".into(), "karl nehammer".into()]),
            relevant_cities: Some(vec!["graz".into(), "linz".into()]),
            subregions: Some(vec!["burgenland".into(), "carinthia".into(), "lower austria".into(), "upper austria".into(), "salzburg".into(), "styria".into(), "tyrol".into(), "vorarlberg".into(), "vienna".into()]),
            misc: Some(vec!["nationalrat".into(), "bundesrat".into(), "verfassungsgerichtshof".into(), "omv".into(), "raiffeisen".into()]),
        }.get_region_vec(), RegionType::Austria);
        map.insert(RegionKeywords {
            names: Some(vec!["azerbaijan".into()]),
            demonyms: Some(vec!["azeri".into()]),
            capitals: Some(vec!["baku".into()]),
            relevant_figures: Some(vec!["aliyev".into(), "mehriban aliyeva".into(), "ali asadov".into(), "sahiba gafarova".into()]),
            relevant_cities: Some(vec!["sumgait".into(), "ganja".into()]),
            subregions: Some(vec!["absheron".into(), "agdash".into(), "aghdam".into(), "aghjabadi".into(), "aghstafa".into(), "agsu".into(), "astara".into(), "balakan".into(), "barda".into(), "beylagan".into(), "bilasuvar".into(), "dashkasan".into(), "fuzuli".into(), "gadabay".into(), "gobustan".into(), "goranboy".into(), "goychay".into(), "goygol".into(), "hajigabul".into(), "imishli".into(), "ismayilli".into(), "jabrayil".into(), "jalilabad".into(), "kalbajar".into(), "khankendi".into(), "khizi".into(), "khojaly".into(), "khojavend".into(), "kurdamir".into(), "lachin".into(), "lankaran".into(), "lerik".into(), "masally".into(), "mingachevir".into(), "naftalan".into(), "neftchala".into(), "oghuz".into(), "qabala".into(), "qakh".into(), "qazax".into(), "quba".into(), "qubadli".into(), "qusar".into(), "saatly".into(), "sabirabad".into(), "salyan".into(), "samukh".into(), "shabran".into(), "shaki".into(), "shamakhi".into(), "shamkir".into(), "shusha".into(), "sirvan".into(), "siyazan".into(), "tartar".into(), "tovuz".into(), "ujar".into(), "yardimli".into(), "yevlakh".into(), "zagatala".into(), "zangilan".into(), "zardab".into()]),
            misc: Some(vec!["socar".into(), "milli majlis".into(), "musavat".into()]),
        }.get_region_vec(), RegionType::Azerbaijan);
        map
    };
}